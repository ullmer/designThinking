// Generated by SolidPython 1.1.1 on 2021-10-28 01:13:43
$fn = 25;


difference() {
	union() {
		translate(v = [0, 0, 0]) {
			cube(size = [1.1875000000, 10.2500000000, 0.6250000000]);
		}
		translate(v = [1.4375000000, 0, 0]) {
			cube(size = [1.1875000000, 9.8750000000, 0.6250000000]);
		}
		translate(v = [2.8750000000, 0, 0]) {
			cube(size = [1.1875000000, 9.7500000000, 0.6250000000]);
		}
		translate(v = [4.3125000000, 0, 0]) {
			cube(size = [1.1875000000, 9.3125000000, 0.6250000000]);
		}
		translate(v = [5.7500000000, 0, 0]) {
			cube(size = [1.1875000000, 9, 0.6250000000]);
		}
		translate(v = [7.1875000000, 0, 0]) {
			cube(size = [1.1875000000, 8.6250000000, 0.6250000000]);
		}
		translate(v = [8.6250000000, 0, 0]) {
			cube(size = [1.1875000000, 8.3125000000, 0.6250000000]);
		}
		translate(v = [10.0625000000, 0, 0]) {
			cube(size = [1.1875000000, 8.0625000000, 0.6250000000]);
		}
		translate(v = [11.5000000000, 0, 0]) {
			cube(size = [1.1875000000, 7.7500000000, 0.6250000000]);
		}
		translate(v = [12.9375000000, 0, 0]) {
			cube(size = [1.1875000000, 7.4375000000, 0.6250000000]);
		}
		translate(v = [14.3750000000, 0, 0]) {
			cube(size = [1.1875000000, 7.0625000000, 0.6250000000]);
		}
		translate(v = [15.8125000000, 0, 0]) {
			cube(size = [1.1875000000, 6.8125000000, 0.6250000000]);
		}
		translate(v = [17.2500000000, 0, 0]) {
			cube(size = [1.1875000000, 6.4375000000, 0.6250000000]);
		}
	}
	color(alpha = 1.0000000000, c = [1, 0, 0]) {
		translate(v = [-1, 3.2000000000, 0.7000000000]) {
			rotate(a = [0, 90, 0]) {
				scale(v = [0.5000000000, 3, 20]) {
					cylinder();
				}
			}
		}
	}
	union() {
		translate(v = [0.6000000000, 1, -1]) {
			cylinder(h = 2, r = 0.2500000000);
		}
		translate(v = [0.0000000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [1.4375000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [2.8750000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [4.3125000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [5.7500000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [7.1875000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [8.6250000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [10.0625000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [11.5000000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [12.9375000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [14.3750000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [15.8125000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
		translate(v = [17.2500000000, 0, 0]) {
			color(alpha = 1.0000000000, c = [0.5000000000, 0.5000000000, 1]) {
				translate(v = [0.6000000000, 1, -1]) {
					cylinder(h = 2, r = 0.2500000000);
				}
			}
		}
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
# SolidPython example code 
# Brygg Ullmer, Clemson University
# Written 2021-10-28

from       solid import * # load in SolidPython/SCAD support code
from synthShapes import *
import yaml

yfn = 'xylophone.yaml'
yf  = open(yfn, 'r')
yd  = yaml.safe_load(yf)

barWidth   = convertFractional(yd['allBars']['wide'])
barThick   = convertFractional(yd['allBars']['thick'])
between    = convertFractional(yd['allBars']['between'])
barLengths = convertFractionalList(yd['lengths'])

#print(barWidth, barThick, barLengths)

outGeom = None; offset = 0
for barLength in barLengths:
  c1 = cube([barWidth, barLength, barThick])
  c2 = translate([offset,0,0])(c1)

  if outGeom == None: outGeom = c2
  else:               outGeom += c2
  offset += barWidth + between

y1 = cylinder()
y2 = scale([.5,3,20])(y1)
y3 = rotate([0,90,0])(y2)
y4 = translate([-1,3.2,.7])(y3)
y5 = color([1,0,0])(y4)
outGeom -= y5

p1 = cylinder(r=.25, h=2)
p2 = translate([.6,1,-1])(p1)
p3 = color([.5,.5,1])(p2)

holePunch = p2
numBars   = len(barLengths)
for i in range(numBars):
  offset = (barWidth + between) * i
  p4 = translate([offset, 0, 0])(p3)
  holePunch += p4

outGeom -= holePunch

radialSegments = 25; hdr = '$fn = %s;' % radialSegments # create a header for the export
scad_render_to_file(outGeom, 'exXyl05.scad', file_header=hdr) # write the .scad file

### end ###

 
 
************************************************/
